name: Semiannual Scan

on:
  workflow_dispatch:
  #schedule:
  #  - cron: '10 06 5 2,7 *'  # Every 6 months at 6 AM UTC (5th of Feb and July)

env:
  GITHUB_URL: "github.com"
  GITHUB_ACCESS_TOKEN: "${{ secrets.GIT_ACCESS_TOKEN }}"
  ORG_NAME: "amartcs"
  GIT_USER: "amartcs"
  GIT_EMAIL: "amarsingh@tcsc.om"
  
jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          # Check if GitHub CLI is installed, and install if necessary
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y gh
          fi

      - name: Authenticate GitHub CLI
        run: |
          echo "${GITHUB_ACCESS_TOKEN}" | gh auth login --hostname "${GITHUB_URL}" --with-token

      - name: Get all repositories and create PRs
        run: |
          SKIP_REPOS_FILE="skip_repos.txt"
          FAILED_REPOS_FILE="failed_repos.txt"
          > $FAILED_REPOS_FILE

          if [ ! -f $SKIP_REPOS_FILE ]; then
            echo "Skip repos list file $SKIP_REPOS_FILE not found!"
            exit 1
          fi

          mapfile -t skip_repos < $SKIP_REPOS_FILE
          repos=$(gh repo list $ORG_NAME --limit 500 --json name -q '.[].name')

          for repo in $repos; do
            if [[ " ${skip_repos[@]} " =~ " $repo " ]]; then
              echo "Skipping $repo (listed in skip_repos.txt)"
              continue
            fi

            echo "Processing $repo..."

            {
              default_branch=$(gh repo view $ORG_NAME/$repo --json defaultBranchRef -q '.defaultBranchRef.name')
              echo "Default branch for $repo is $default_branch"

              gh repo clone $ORG_NAME/$repo
              cd $repo

              git config --global user.email "${GIT_EMAIL}"
              git config --global user.name "${GIT_USER}"
              git remote set-url origin https://x-access-token:${GITHUB_ACCESS_TOKEN}@${GITHUB_URL}/$ORG_NAME/$repo.git

              git checkout -b semiannual-update
              echo "Semiannual update - $(date)" >> README.md
              git add README.md
              git commit -m "Semiannual update"

              git push origin --delete semiannual-update || true
              git push origin semiannual-update --force

              # Create PR and capture PR URL
              pr_url=$(gh pr create --title "Semiannual Update" --body "Automated semiannual update" --base "$default_branch" --head "semiannual-update")
              echo "Created PR: $pr_url"

              # Get PR number
              pr_number=$(gh pr view $pr_url --json number -q '.number')
              echo "PR number: $pr_number"

              # Get commit SHA of the PR head
              sha=$(gh pr view $pr_number --json headRefOid -q '.headRefOid')
              echo "Commit SHA for PR: $sha"

              # Poll workflow status until Integration build completes
              echo "Waiting for 'Integration build' workflow run to complete for $repo..."

              attempts=0
              max_attempts=5
              status=""
              conclusion=""

              while [[ "$status" != "completed" && $attempts -lt $max_attempts ]]; do
                sleep 30
                attempts=$((attempts+1))

                run_info=$(curl -s -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" \
                  "https://api.github.com/repos/${ORG_NAME}/${repo}/actions/workflows/integration-build.yml/runs?event=pull_request&branch=semiannual-update")

                run_count=$(echo "$run_info" | jq '.workflow_runs | length')
                if [[ "$run_count" -eq 0 ]]; then
                  echo "Integration build run not found yet (attempt $attempts/$max_attempts)"
                  continue
                fi

                status=$(echo "$run_info" | jq -r '.workflow_runs[0].status')
                conclusion=$(echo "$run_info" | jq -r '.workflow_runs[0].conclusion')
                echo "Integration build → Status: $status | Conclusion: $conclusion"
              done

              if [[ "$status" != "completed" ]]; then
                echo "Integration build did not complete after $max_attempts checks. Skipping $repo."
                echo "$repo" >> ../$FAILED_REPOS_FILE
              elif [[ "$conclusion" != "success" ]]; then
                echo "Integration build failed for $repo ❌"
                echo "$repo" >> ../$FAILED_REPOS_FILE
              else
                echo "Integration build succeeded for $repo ✅"
              fi
              
              # Clean up cloned repo
              cd ..
              rm -rf $repo

            } || {
              echo "Failed to process $repo, storing in $FAILED_REPOS_FILE."
              echo "$repo" >> $FAILED_REPOS_FILE
            }
            done

      - name: Display Failed repo list
        run: |
          cat $FAILED_REPOS_FILE
    
