name: Semiannual Scan

on:
  workflow_dispatch:
  #schedule:
  #  - cron: '10 06 5 2,7 *'  # Every 6 months at 6 AM UTC (5th of Feb and July)

env:
  GITHUB_URL: "github.com"
  GITHUB_ACCESS_TOKEN: "${{ secrets.GIT_ACCESS_TOKEN }}"
  ORG_NAME: "amartcs"
  GIT_USER: "amartcs"
  GIT_EMAIL: "amarsingh@tcsc.om"
  WORKFLOW_FILE: "integration-check.yml"


jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          # Check if GitHub CLI is installed, and install if necessary
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y gh
          fi

      - name: Authenticate GitHub CLI
        run: |
          echo "${GITHUB_ACCESS_TOKEN}" | gh auth login --hostname "${GITHUB_URL}" --with-token

      - name: Get all repositories and create PRs
        run: |
          SKIP_REPOS_FILE="skip_repos.txt"
          FAILED_REPOS_FILE="failed_repos.txt"
          > $FAILED_REPOS_FILE

          if [ ! -f $SKIP_REPOS_FILE ]; then
            echo "Skip repos list file $SKIP_REPOS_FILE not found!"
            exit 1
          fi

          mapfile -t skip_repos < $SKIP_REPOS_FILE
          repos=$(gh repo list $ORG_NAME --limit 500 --json name -q '.[].name')

          for repo in $repos; do
          if [[ " ${skip_repos[@]} " =~ " $repo " ]]; then
            echo "Skipping $repo (listed in skip_repos.txt)"
            continue
          fi

          echo "Processing $repo..."

          # Error handling: Continue on error
            {
              # Get the default branch of the repository
              default_branch=$(gh repo view $ORG_NAME/$repo --json defaultBranchRef -q '.defaultBranchRef.name')
              echo "Default branch for $repo is $default_branch"

              # Clone the repository
              gh repo clone $ORG_NAME/$repo
              cd $repo

              # Setup Git user
              git config --global user.email "${GIT_EMAIL}"
              git config --global user.name "${GIT_USER}"
              git remote set-url origin https://x-access-token:${GITHUB_ACCESS_TOKEN}@${GITHUB_URL}/$ORG_NAME/$repo.git

              # Create a new branch
              git checkout -b semiannual-update

              # Make changes to files (e.g., update README or add a version tag)
              echo "Semiannual update - $(date)" >> README.md
              git add README.md
              git commit -m "Semiannual update"

              # Remove the remote branch if it exists
              git push origin --delete semiannual-update || true

              # Push the branch to the repository
              git push origin semiannual-update --force

              # Create the PR, using the default branch as base
              gh pr create --title "Semiannual Update" --body "Automated semiannual update" --base $default_branch --head semiannual-update
              sleep 60

              # Poll workflow status until Integration build completes
              BRANCH="semiannual-update"
              max_checks=5
              count=0

              while true; do
                response=$(curl -s -H "Authorization: token $GITHUB_ACCESS_TOKEN" \
                  "https://api.github.com/repos/$ORG_NAME/$repo/actions/workflows/$WORKFLOW_FILE/runs?branch=$BRANCH&per_page=1")

                status=$(echo "$response" | jq -r '.workflow_runs[0].status')
                conclusion=$(echo "$response" | jq -r '.workflow_runs[0].conclusion')

                echo "⏳ Workflow status: $status (conclusion: $conclusion)"

                if [[ "$status" == "completed" ]]; then
                  echo "✅ Workflow finished with conclusion: $conclusion"
                  break
                elif [[ "$status" == "in_progress" || "$status" == "queued" ]]; then
                  echo "🔄 Workflow is running (status: $status). Waiting 30s..."
                  sleep 30
                  continue
                fi

                if [[ "$status" == "null" ]]; then
                  count=$((count + 1))
                  echo "⚠️ No workflow run found yet. Retry $count/$max_checks..."
                  if [[ $count -ge $max_checks ]]; then
                    echo "❌ Workflow did not start after $max_checks checks."
                    break
                  fi
                  sleep 30
                fi
               done

              cd ..
              rm -rf $repo # Clean up

            } || {
              echo "Failed to process $repo, storing in $FAILED_REPOS_FILE."
              echo "$repo" >> $FAILED_REPOS_FILE
            }

          done           


      - name: Display Failed repo list
        run: |
          cat $FAILED_REPOS_FILE
    
