name: Semiannual Scan

on:
  workflow_dispatch:
  #schedule:
  #  - cron: '10 06 5 2,7 *'  # Every 6 months at 6 AM UTC (5th of Feb and July)

env:
  GITHUB_URL: "github.deutsche-boerse.de"
  GITHUB_ACCESS_TOKEN: "${{ secrets.ACTION_GITHUB_ACCESS_TOKEN }}"
  ORG_NAME: "ccfc"
  GIT_USER: "${{ secrets.GIT_USERNAME }}"
  GIT_EMAIL: "${{ secrets.GIT_EMAIL }}"
  SCAN_BRANCH: "semiannual-scan"

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y gh
          fi

      - name: Authenticate GitHub CLI
        run: |
          echo "${GITHUB_ACCESS_TOKEN}" | gh auth login --hostname "${GITHUB_URL}" --with-token

      - name: Get all repositories and create PRs
        run: |
          SKIP_REPOS_FILE="skip_repos.txt"
          FAILED_REPOS_FILE="failed_repos.txt"
          > $FAILED_REPOS_FILE

          if [ ! -f $SKIP_REPOS_FILE ]; then
            echo "Skip repos list file $SKIP_REPOS_FILE not found!"
            exit 1
          fi

          mapfile -t skip_repos < $SKIP_REPOS_FILE
          repos=$(gh repo list $ORG_NAME --limit 500 --json name -q '.[].name')

          for repo in $repos; do
            if [[ " ${skip_repos[@]} " =~ " $repo " ]]; then
              echo "Skipping $repo (listed in skip_repos.txt)"
              continue
            fi

            echo "Processing $repo..."

            {
              # Get the default branch of the repository
              default_branch=$(gh repo view $ORG_NAME/$repo --json defaultBranchRef -q '.defaultBranchRef.name')
              echo "Default branch for $repo is $default_branch"

              # Clone the repository
              gh repo clone $ORG_NAME/$repo
              cd $repo

              # Check if an integration-* workflow exists
              workflow_file=$(gh workflow list --json name,path --jq '.[] | select(.path | test("integration-.*\\.yml")) | .path' | head -n 1 || true)

              if [ -z "$workflow_file" ]; then
                echo "⚠️ No matching integration-* workflow found in $repo, skipping PR creation."
                cd ..
                rm -rf $repo
                continue
              fi

              echo "✅ Found workflow file: $workflow_file in $repo"

              # Setup Git user
              git config --global user.email "${GIT_EMAIL}"
              git config --global user.name "${GIT_USER}"
              git remote set-url origin https://x-access-token:${GITHUB_ACCESS_TOKEN}@${GITHUB_URL}/$ORG_NAME/$repo.git

              # Create a new branch
              git checkout -b $SCAN_BRANCH

              # Make changes to files
              echo "$SCAN_BRANCH-$(date)" >> README.md
              git add README.md
              git commit -m "$SCAN_BRANCH"

              # Remove the remote branch if it exists
              git push origin --delete $SCAN_BRANCH || true

              # Push the branch to the repository
              git push origin $SCAN_BRANCH --force

              # Create the PR
              gh pr create --title "Semiannual Scan" --body "Automated semiannual scan" --base $default_branch --head $SCAN_BRANCH
              sleep 60

              # Capture the last commit SHA we pushed
              commit_sha=$(git rev-parse HEAD)
              echo "🔍 Looking for workflow runs triggered by commit $commit_sha"

              # Poll workflow runs for this branch and match commit
              max_checks=5
              count=0

              while true; do
                response=$(curl -s -H "Authorization: token $GITHUB_ACCESS_TOKEN" \
                  "https://api.github.com/repos/$ORG_NAME/$repo/actions/runs?branch=$SCAN_BRANCH&per_page=5")

                run_id=$(echo "$response" | jq -r ".workflow_runs[] | select(.head_sha==\"$commit_sha\") | .id" | head -n 1)
                status=$(echo "$response" | jq -r ".workflow_runs[] | select(.head_sha==\"$commit_sha\") | .status" | head -n 1)
                conclusion=$(echo "$response" | jq -r ".workflow_runs[] | select(.head_sha==\"$commit_sha\") | .conclusion" | head -n 1)
                workflow_name=$(echo "$response" | jq -r ".workflow_runs[] | select(.head_sha==\"$commit_sha\") | .name" | head -n 1)

                if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
                  count=$((count+1))
                  echo "⚠️ No workflow run yet for commit. Retry $count/$max_checks..."
                  if [[ $count -ge $max_checks ]]; then
                    echo "❌ No workflow triggered for commit $commit_sha after $max_checks checks."
                    break
                  fi
                  sleep 30
                  continue
                fi

                echo "⏳ Workflow '$workflow_name' (run $run_id) status: $status (conclusion: $conclusion)"

                if [[ "$status" == "completed" ]]; then
                  echo "✅ Workflow '$workflow_name' finished with conclusion: $conclusion"
                  break
                elif [[ "$status" == "in_progress" || "$status" == "queued" ]]; then
                  echo "🔄 Workflow '$workflow_name' is running (status: $status). Waiting 30s..."
                  sleep 30
                  continue
                fi  
              done  

              cd ..
              echo "Cleaning up repository $repo..."
              rm -rf $repo

            } || {
              echo "Failed to process $repo, storing in $FAILED_REPOS_FILE."
              echo "$repo" >> $FAILED_REPOS_FILE
            }
          done

      - name: Display Failed repo list
        run: |          
          if [ -s $FAILED_REPOS_FILE ]; then
            echo "Some repositories failed to process. Checking $FAILED_REPOS_FILE for details."
            cat $FAILED_REPOS_FILE
          else
            echo "All repositories processed successfully."
          fi
